/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import * as axios from '../axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Article200,
  ArticleParams,
  AutofillParams,
  ChatParams,
  SearchParams,
  SearchResponse,
  SidebarChatParams,
  SummaryParams
} from './fastAPI.schemas';




  export const getFastAPI = () => {
/**
 * @summary First200
 */
const first200ScriptFirst200Get = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/script/first200`,options
    );
  }

/**
 * @summary Last200
 */
const last200ScriptLast200Get = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/script/last200`,options
    );
  }

/**
 * @summary Missing
 */
const missingScriptMissingGet = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/script/missing`,options
    );
  }

/**
 * @summary Create Session
 */
const createSession = <TData = AxiosResponse<string>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/sessions/create`,undefined,{
        responseType: 'text',
    ...options,}
    );
  }

/**
 * @summary Chat
 */
const chat = <TData = AxiosResponse<unknown>>(
    params: ChatParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/chat`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Sidebar Session
 */
const sidebarSession = <TData = AxiosResponse<string>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/sidebar_session/create`,undefined,{
        responseType: 'text',
    ...options,}
    );
  }

/**
 * @summary Sidebar Chat
 */
const sidebarChat = <TData = AxiosResponse<unknown>>(
    params: SidebarChatParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/sidebar/chat`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Search
 */
const search = <TData = AxiosResponse<SearchResponse[]>>(
    params: SearchParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/search`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Summary
 */
const summary = <TData = AxiosResponse<string>>(
    params: SummaryParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/summary`,undefined,{
        responseType: 'text',
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Autofill
 */
const autofill = <TData = AxiosResponse<string[]>>(
    params: AutofillParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/autofill`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Article
 */
const article = <TData = AxiosResponse<Article200>>(
    params: ArticleParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/article`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

return {first200ScriptFirst200Get,last200ScriptLast200Get,missingScriptMissingGet,createSession,chat,sidebarSession,sidebarChat,search,summary,autofill,article}};
export type First200ScriptFirst200GetResult = AxiosResponse<unknown>
export type Last200ScriptLast200GetResult = AxiosResponse<unknown>
export type MissingScriptMissingGetResult = AxiosResponse<unknown>
export type CreateSessionResult = AxiosResponse<string>
export type ChatResult = AxiosResponse<unknown>
export type SidebarSessionResult = AxiosResponse<string>
export type SidebarChatResult = AxiosResponse<unknown>
export type SearchResult = AxiosResponse<SearchResponse[]>
export type SummaryResult = AxiosResponse<string>
export type AutofillResult = AxiosResponse<string[]>
export type ArticleResult = AxiosResponse<Article200>
